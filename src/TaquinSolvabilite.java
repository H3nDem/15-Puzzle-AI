import java.util.ArrayList;
import java.util.HashMap;

public class TaquinSolvabilite {
    /****** Classe permettant de determiner si un jeu de taquin est solvable c'est √† dire si il peut aller de la congifuration initial √† la configuration final ******/
    /****** üìúüìúüìúüìúüìú‚¨áÔ∏èDOCUMENTATION D√©plier ci-dessous‚¨áÔ∏èüìúüìúüìúüìúüìú******/
    /*
    VIDEO YOUTUBE Utilis√© : https://youtu.be/YI1WqYKHi78 - Pourquoi ce puzzle est-il impossible? ‚Äî Numberphile
    Wikipedia : https://fr.wikipedia.org/wiki/Taquin

    Voici aussi ce que l'o
     Lorsque la taille du jeu de taquin n'est pas fix√©e √† 3, la m√©thode pour d√©terminer la solvabilit√© peut √™tre l√©g√®rement diff√©rente.
     Voici une approche g√©n√©rale pour les jeux de taquin de taille n x m o√π n peut √™tre diff√©rent de 3 :
        1.Comptez le nombre d'inversions dans l'√©tat initial du jeu de taquin, tout comme dans la m√©thode pr√©c√©dente.
        Une inversion se produit lorsqu'un nombre est situ√© √† un emplacement diff√©rent de sa position finale souhait√©e et
        qu'un nombre plus petit que lui se trouve entre eux.

        2.V√©rifiez si la somme des inversions dans l'√©tat initial et la distance (en nombre de d√©placements) entre
        la case vide et sa position finale souhait√©e ont la m√™me parit√© (c'est-√†-dire qu'ils sont soit tous les deux pairs,
        soit tous les deux impairs).

        3.Si la parit√© des inversions et la parit√© de la distance entre la case vide et sa position finale sont les m√™mes,
        alors le jeu de taquin est solvable. Sinon, s'ils sont diff√©rents, le jeu de taquin est insolvable.

     Il existe plusieurs m√©thodes pour calculer la distance entre la case vide et sa position finale,
     telles que la distance de Manhattan ou la distance de Hamming. La distance de Manhattan est g√©n√©ralement utilis√©e pour les jeux de taquin,
     et elle est calcul√©e comme la somme des distances horizontale et verticale entre la position actuelle de chaque nombre
     et sa position finale souhait√©e. La parit√© de cette distance est utilis√©e pour d√©terminer la solvabilit√© du jeu.

     Il est important de noter que pour les jeux de taquin de taille n x m o√π n et m sont tous les deux pairs,
     il peut exister des configurations qui ont la m√™me parit√© d'inversions et de distance, mais qui ne sont pas solvables.
     Dans de tels cas, le jeu de taquin est insolvable m√™me si les parit√©s des inversions et de la distance sont les m√™mes.
     Cependant, ces configurations sont rares et la m√©thode g√©n√©rale d√©crite ci-dessus est valable pour la plupart des jeux de taquin de taille n x m.
     */
    /** ATTRIBUTS **/
    private EtatTaquin etatInit;
    private EtatTaquin etatFinal;
    private char[][] etatInitTabCells;
    private char[][] etatFinalTabCells;
    private ArrayList<Character> listMelange = new ArrayList<>();
    private ArrayList<Character> listeOrdonne = new ArrayList<>();

    private int nbInversions;
    //private int nbColonnes;
    private int distanceManhattanAvecPosFinal;

    private boolean isNbInversionsEven;
    //private boolean isNbColonnesEven;
    private boolean isDistanceManhattanEven;
    private boolean isSolvable;
    /** CONSTRUCTEUR **/
    public TaquinSolvabilite(EtatTaquin etatInit, EtatTaquin etatFinal) {
        this.etatInit = etatInit;
        this.etatFinal = etatFinal;
        calculateIfSolvable();
    }
    private boolean calculateIfSolvable(){
        //ORDRE IMPORTANT !!!
        initTabCells();
        initArrayLists();
        System.out.println(listMelange);
        System.out.println(listeOrdonne);
        calculateNbInversions();
        System.out.println(nbInversions);
        //calculateNbColonnes(); //NE fonctionne que quand n = 3 sur un taquin n x m
        calculDistanceDeManhattanDeCaseVideAvecLaPosFinal();
        System.out.println("distance de manhattan"+distanceManhattanAvecPosFinal);
        fillBoolean();

        isSolvable = ( isNbInversionsEven && isDistanceManhattanEven )
                || ( !isNbInversionsEven && !isDistanceManhattanEven );
        return isSolvable;
    }

    /** Methodes li√© √† calculateIfSolvable **/
    private void calculDistanceDeManhattanDeCaseVideAvecLaPosFinal() {
        //Positions de la case vide dans l'√©tat initial et l'√©tat final :
        int posXInit = etatInit.getPosXCaseVide();
        int posYInit = etatInit.getPosYCaseVide();
        int posXFinal = etatFinal.getPosXCaseVide();
        int posYFinal= etatFinal.getPosYCaseVide();

        distanceManhattanAvecPosFinal =
                Math.abs(posXFinal-posXInit) + Math.abs(posYFinal - posYInit);

    }

    private void initTabCells() {
        this.etatInitTabCells = DeepCopyMatrix.deepCopyCharMatrix(this.etatInit.getTabCells());
        this.etatFinalTabCells = DeepCopyMatrix.deepCopyCharMatrix(this.etatFinal.getTabCells());
    }
    private void initArrayLists() {
        for (int i = 0; i < etatInitTabCells.length; i++) {
            for (int j = 0; j < etatInitTabCells[0].length; j++) {
                listMelange.add(etatInitTabCells[i][j]);
                listeOrdonne.add(etatFinalTabCells[i][j]);
            }
        }
    }

    private void calculateNbInversions(){
        HashMap<Character,Integer> mapCharPos = new HashMap<Character,Integer>();
        for (int i = 0; i < listeOrdonne.size(); i++) {
            mapCharPos.put(listeOrdonne.get(i),i);
        }
        //System.out.println(mapCharPos);
        int nbInversions = 0;
        for (int i = 0; i < listMelange.size(); i++) {
            Character characterCourant = listMelange.get(i);
            //System.out.println("characterCourant: " + characterCourant);
            for (int j = i; j < listMelange.size(); j++) {
                Character characterCourant2 = listMelange.get(j);
                //System.out.println("secondeBoucle: " + characterCourant2);
                if ( mapCharPos.get(characterCourant) > mapCharPos.get(characterCourant2) ){
                    nbInversions++;
                    //System.out.println("mapCharPos.get(charCourant)="+mapCharPos.get(characterCourant));
                    //System.out.println("mapCharPos.get(charCourant2)="+mapCharPos.get(characterCourant2));
                    //System.out.println("nbInversions"+nbInversions);
                }
            }
        }
        this.nbInversions = nbInversions;
        //System.out.println(nbInversions);
    }

    //NE FONCTIONNE QUE QUAND N = 3 sur un taquin n x m
//    private void calculateNbColonnes(){
//        this.nbColonnes = this.etatFinalTabCells[0].length;
//    }

    private void fillBoolean(){
        isNbInversionsEven = this.nbInversions % 2 == 0;
        //isNbColonnesEven = this.distanceManhattanAvecPosFinal % 2 == 0;
        isDistanceManhattanEven = this.distanceManhattanAvecPosFinal % 2 == 0;

    }

    public boolean isSolvable(){
        return isSolvable;
    }



}
